package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"redis-go/internal/config"
	"redis-go/internal/server"
)

func main() {
	// Chargement de la configuration depuis les variables d'environnement ou valeurs par d√©faut
	serverConfiguration := config.LoadServerConfiguration()

	// Cr√©ation du serveur Redis
	redisServerInstance := server.NewRedisServerInstance(serverConfiguration)

	// Canal pour intercepter les signaux syst√®me (CTRL+C, SIGTERM)
	systemInterruptSignal := make(chan os.Signal, 1)
	signal.Notify(systemInterruptSignal, os.Interrupt, syscall.SIGTERM)

	// D√©marrage du serveur dans une goroutine s√©par√©e
	go func() {
		log.Printf("üéØ D√©marrage du serveur Redis-Go sur %s:%d",
			serverConfiguration.NetworkConfiguration.HostAddress,
			serverConfiguration.NetworkConfiguration.PortNumber)
		if startupError := redisServerInstance.StartRedisServer(); startupError != nil {
			log.Fatalf("‚ùå Impossible de d√©marrer le serveur: %v", startupError)
		}
	}()

	// Attente du signal d'arr√™t
	<-systemInterruptSignal
	fmt.Println("\nüõë Arr√™t du serveur en cours...")

	// Arr√™t propre du serveur
	if shutdownError := redisServerInstance.StopRedisServer(); shutdownError != nil {
		log.Printf("‚ö†Ô∏è  Erreur lors de l'arr√™t: %v", shutdownError)
	}

	log.Println("‚úÖ Serveur arr√™t√© proprement")
}
